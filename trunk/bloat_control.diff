Index: src/athena/athena.cpp
===================================================================
--- src/athena/athena.cpp	(revision 1408)
+++ src/athena/athena.cpp	(working copy)
@@ -44,7 +44,7 @@
   
 #endif /* end PARALLEL code block */
    
-    string version_date = "5/20/11";
+    string version_date = "11/8/2011";
     string exec_name = "ATHENA";
     
     if(argc < 2){
Index: src/athena/GENNAlg.cpp
===================================================================
--- src/athena/GENNAlg.cpp	(revision 1408)
+++ src/athena/GENNAlg.cpp	(working copy)
@@ -137,6 +137,7 @@
                 else
                   gaSelector = GASelectorMap[Stringmanip::to_upper(mapIter->second)];
                   break;
+#ifdef ATHENA_BLOAT_CONTROL
             case doubleTournF:
                 doubletourneyF = Stringmanip::stouint(mapIter->second);
                 break;
@@ -146,6 +147,7 @@
             case doubleTournFitFirst:
                 fitfirst = Stringmanip::check_true_false(mapIter->second);
                 break;
+#endif
             case blockCrossGens:
                 ngens_block_cross = Stringmanip::stouint(mapIter->second);
                 break;
@@ -158,7 +160,9 @@
             case bpfreq:    
                 bp_freq_gen = Stringmanip::stoi(mapIter->second);
                 break;
+#ifdef ATHENA_BLOAT_CONTROL
             case prunePlantFract:
+#endif
             default:
                 throw HemannExcept("No match for parameter " + mapIter->first +
                         " in Algorithm GENN");               
@@ -241,19 +245,25 @@
    param_map["BACKPROPFREQ"] = bpfreq;
    param_map["BACKPROPSTART"] = bpstart;
    param_map["GASELECTION"] = gaSelection;
+#ifdef ATHENA_BLOAT_CONTROL
    param_map["DOUBTOURNF"] = doubleTournF;
    param_map["DOUBTOURND"] = doubleTournD;
    param_map["DOUBTOURNFITFIRST"] = doubleTournFitFirst;
    param_map["PRUNEPLANT"] = prunePlantFract;
+#endif
    
    BioModelSelectionMap["ROULETTE"] = rouletteSelect;
    BioModelSelectionMap["ORDERED"] = orderedSelect;
    
+#ifdef ATHENA_BLOAT_CONTROL
    GASelectorMap["DOUBLE"] = DoubleTournamentSelection;
+#endif
    GASelectorMap["ROULETTE"] = RouletteWheelSelection;
    
    biofilter_selector_type = orderedSelect;
+#ifdef ATHENA_BLOAT_CONTROL
    pruneAndPlantFract = 0.0;
+#endif
 
    parameters_set = false;
    useAllVars = false;
@@ -277,9 +287,11 @@
    
    logTypeSelected = LogNone;
    gaSelector = RouletteWheelSelection;
+#ifdef ATHENA_BLOAT_CONTROL
    fitfirst = false;
    doubletourneyF = 7;
    doubletourneyD = 1.4;
+#endif
    
    #ifdef PARALLEL
      genomeInfo = 112;
@@ -716,8 +728,10 @@
     // Set up the algorithm
     ga = new GASimpleGA(genome);
     
+#ifdef ATHENA_BLOAT_CONTROL
     ga->setPrunePlant(pruneAndPlantFract);
     ga->pruneplant(GE1DArrayGenome::prune_and_plant);
+#endif
 
     // Set selector type
     GASelectionScheme* selector;
@@ -726,9 +740,11 @@
       case RouletteWheelSelection:
         selector = new GARouletteWheelSelector;
         break;
+#ifdef ATHENA_BLOAT_CONTROL
       case DoubleTournamentSelection:
         selector = new GADoubleTournamentSelector(doubletourneyD, doubletourneyF, fitfirst);
         break;
+#endif
     };
     
     ga->selector(*selector);
Index: src/athena/GE1DArrayGenome.cpp
===================================================================
--- src/athena/GE1DArrayGenome.cpp	(revision 1408)
+++ src/athena/GE1DArrayGenome.cpp	(working copy)
@@ -275,6 +275,7 @@
 }
 
 
+#ifdef ATHENA_BLOAT_CONTROL
 ///
 /// Performs prune and plant on genome passed
 ///
@@ -335,6 +336,7 @@
   delete cloned;
   return inc=1;
 }
+#endif
 
 
 
Index: src/athena/GESymbReg.cpp
===================================================================
--- src/athena/GESymbReg.cpp	(revision 1408)
+++ src/athena/GESymbReg.cpp	(working copy)
@@ -122,9 +122,11 @@
             case resetVarsAtMigration:
                 reset_restricted_at_migration = Stringmanip::check_true_false(mapIter->second);
                 break;
+#ifdef ATHENA_BLOAT_CONTROL
             case prunePlantFract:
                 pruneAndPlantFract = Stringmanip::stodouble(mapIter->second);
                 break;
+#endif
             case bpstart:
                 throw HemannExcept("No match for parameter " + mapIter->first +
                         " in Algorithm GE Symbolic Regression");
Index: src/athena/GE1DArrayGenome.h
===================================================================
--- src/athena/GE1DArrayGenome.h	(revision 1408)
+++ src/athena/GE1DArrayGenome.h	(working copy)
@@ -45,7 +45,9 @@
 			  GAGenome* c1, 
 			  GAGenome* c2);
 
+#ifdef ATHENA_BLOAT_CONTROL
   static int prune_and_plant(GAGenome* start, GAGenome* planted);
+#endif
 
   static int codonMutator(GAGenome& g, float pmut);
 
Index: src/galib247/ga/GABaseGA.h
===================================================================
--- src/galib247/ga/GABaseGA.h	(revision 1408)
+++ src/galib247/ga/GABaseGA.h	(working copy)
@@ -191,8 +191,10 @@
   GAGenome::AsexualCrossover crossover(GAGenome::AsexualCrossover f)
     {return across=f;}
   GAGenome::AsexualCrossover asexual() const {return across;}
+#ifdef ATHENA_BLOAT_CONTROL
   GAGenome::PruneAndPlant pruneplant(GAGenome::PruneAndPlant f) {return pandp=f;;}
   GAGenome::PruneAndPlant pruneplant() const {return pandp;}
+#endif
 
 //  const GAStatistics & statistics() const {return stats;}
   GAStatistics & statistics() {return stats;}
@@ -251,7 +253,9 @@
   int minmax;
   GAGenome::SexualCrossover scross;	// sexual crossover to use
   GAGenome::AsexualCrossover across;	// asexual crossover to use
+#ifdef ATHENA_BLOAT_CONTROL
   GAGenome::PruneAndPlant pandp; // prune and plant to use
+#endif
 };
 
 #endif
Index: src/galib247/ga/GASelector.h
===================================================================
--- src/galib247/ga/GASelector.h	(revision 1408)
+++ src/galib247/ga/GASelector.h	(working copy)
@@ -164,6 +164,7 @@
  * We derive from the roulette wheel class so
 that we can use its update method.
 ---------------------------------------------------------------------------- */
+#ifdef ATHENA_BLOAT_CONTROL
 #if USE_DOUBLETOURNAMENT_SELECTOR == 1
 class GADoubleTournamentSelector : public GASelectionScheme {
 public:
@@ -192,6 +193,7 @@
 };
 
 #endif
+#endif
 
 
 /* ----------------------------------------------------------------------------
Index: src/galib247/ga/GASimpleGA.C
===================================================================
--- src/galib247/ga/GASimpleGA.C	(revision 1408)
+++ src/galib247/ga/GASimpleGA.C	(working copy)
@@ -26,14 +26,18 @@
   oldPop = pop->clone();
 
   el = gaTrue;
+#ifdef ATHENA_BLOAT_CONTROL
   prunePlantFract = 0.0;
+#endif
   params.add(gaNelitism, gaSNelitism, GAParameter::BOOLEAN, &el);
 }
 GASimpleGA::GASimpleGA(const GAPopulation& p) : GAGeneticAlgorithm(p){
   oldPop = pop->clone();
 
   el = gaTrue;
+#ifdef ATHENA_BLOAT_CONTROL
   prunePlantFract = 0.0;
+#endif
   params.add(gaNelitism, gaSNelitism, GAParameter::BOOLEAN, &el);
 }
 GASimpleGA::GASimpleGA(const GASimpleGA& ga) : GAGeneticAlgorithm(ga){
@@ -53,7 +57,9 @@
   GAGeneticAlgorithm::copy(g);
   const GASimpleGA& ga = DYN_CAST(const GASimpleGA&,g);
   el = ga.el;
+#ifdef ATHENA_BLOAT_CONTROL
   prunePlantFract = ga.prunePlantFract;
+#endif
   if(oldPop) oldPop->copy(*(ga.oldPop));
   else oldPop = ga.oldPop->clone();
   oldPop->geneticAlgorithm(*this);
@@ -170,10 +176,12 @@
 void
 GASimpleGA::step()
 {
+#ifdef ATHENA_BLOAT_CONTROL
   if(getPrunePlant()>0.0){
     prune_and_plant_step();
     return;
   }
+#endif
 
   int i, mut, c1, c2;
   GAGenome *mom, *dad;          // tmp holders for selected genomes
@@ -254,6 +262,7 @@
 
 
 
+#ifdef ATHENA_BLOAT_CONTROL
 //   Evolve a new generation of genomes.  When we start this routine, pop
 // contains the current generation.  When we finish, pop contains the new 
 // generation and oldPop contains the (no longer) current generation.  The 
@@ -356,3 +365,4 @@
 
   stats.update(*pop);		// update the statistics by one generation
 }
+#endif
Index: src/galib247/ga/GASimpleGA.h
===================================================================
--- src/galib247/ga/GASimpleGA.h	(revision 1408)
+++ src/galib247/ga/GASimpleGA.h	(working copy)
@@ -29,7 +29,9 @@
   virtual void initialize(unsigned int seed=0);
   virtual void evaluatePop();
   virtual void step();
+#ifdef ATHENA_BLOAT_CONTROL
   void prune_and_plant_step();
+#endif
   GASimpleGA & operator++() { step(); return *this; }
 
   virtual int setptr(const char* name, const void* value);
@@ -55,13 +57,17 @@
   virtual void objectiveFunction(GAGenome::Evaluator f);
   virtual void objectiveData(const GAEvalData& v);
   
+#ifdef ATHENA_BLOAT_CONTROL
   virtual void setPrunePlant(float ppf){prunePlantFract=ppf;}
   virtual float getPrunePlant(){return prunePlantFract;}
+#endif
 
 protected:
   GAPopulation *oldPop;		// current and old populations
   GABoolean el;			// are we elitist?
+#ifdef ATHENA_BLOAT_CONTROL
   float prunePlantFract;
+#endif
 };
 
 
Index: src/galib247/ga/GASelector.C
===================================================================
--- src/galib247/ga/GASelector.C	(revision 1408)
+++ src/galib247/ga/GASelector.C	(working copy)
@@ -245,6 +245,7 @@
 #endif
 
 
+#ifdef ATHENA_BLOAT_CONTROL
 /* ----------------------------------------------------------------------------
  * DoubleTournamentSelector
  * Introduced as a bloat control operator for use with GE and the block crossover
@@ -311,6 +312,7 @@
 }
 
 #endif
+#endif
 
 
 /* ----------------------------------------------------------------------------
